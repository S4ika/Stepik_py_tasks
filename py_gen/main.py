import Final_work_on_nested_lists_and_matrices
import dictionaries
import josephus_problem, coordinate_quarters, more_than_previous, swap_neighbour,\
    developmental_shift, various_elements, mul_dig, rock_paper_scissors,rock_paper_scissors_lizard_spok,\
    o_and_p,sillicon_valley,roscomnadzor, pascal_triangle, packing_duplicates, chunky, sublists, matrix
import sets
import tuples


def tasks():
    print("1. –ó–∞–¥–∞—á–∞ –ò–æ—Å–∏—Ñ–∞ –§–ª–∞–≤–∏—è")
    print("2. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–µ —á–µ—Ç–≤–µ—Ä—Ç–∏")
    print("3. –ë–æ–ª—å—à–µ —á–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ")
    print("4. –ù–∞–∑–∞–¥, –≤–ø–µ—Ä—ë–¥ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç")
    print("5. –°–¥–≤–∏–≥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏")
    print("6. –†–∞–∑–ª–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã")
    print("7. –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª")
    print("8. –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞")
    print("9. –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞, —è—â–µ—Ä–∏—Ü–∞, –°–ø–æ–∫ ")
    print("10. –û—Ä–µ–ª –∏ –†–µ—à–∫–∞")
    print("11. –ö—Ä–µ–º–Ω–∏–µ–≤–∞—è –¥–æ–ª–∏–Ω–∞")
    print("12. –†–æ—Å–∫–æ–º–Ω–∞–¥–∑–æ—Ä –∑–∞–ø—Ä–µ—Ç–∏–ª –±—É–∫–≤—É –∞")
    print("13. –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –ü–∞—Å–∫–∞–ª—è (–≤—ã–≤–æ–¥–∏–º n-–π —É—Ä–æ–≤–µ–Ω—å)")
    print("14. –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –ü–∞—Å–∫–∞–ª—è")
    print("15. –£–ø–∞–∫–æ–≤–∫–∞ –¥—É–ø–ª–∏–∫–∞—Ç–æ–≤")
    print("16. –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏")
    print("17. –ü–æ–¥—Å–ø–∏—Å–∫–∏ —Å–ø–∏—Å–∫–∞")
    print("18. –í–≤–æ–¥ –∏ –≤—ã–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã")
    print("19. –°–ª–µ–¥ –º–∞—Ç—Ä–∏—Ü—ã")
    print("20. –ë–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ")
    print("21. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∏–∂–µ(–∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞) –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏")
    print("22. –°—É–º–º—ã —á–µ—Ç–≤–µ—Ä—Ç–µ–π –º–∞—Ç—Ä–∏—Ü—ã")
    print("23. –¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è")
    print("24. –ú–∞–∫—Å–∏–º—É–º –≤ —Ç–∞–±–ª–∏—Ü–µ(–∏–Ω–¥–µ–∫—Å—ã –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è)")
    print("25. –û–±–º–µ–Ω —Å—Ç–æ–ª–±—Ü–æ–≤")
    print("26. –°–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞")
    print("27. –û–±–º–µ–Ω –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π")
    print("28. –ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    print("29. –ü–æ–≤–æ—Ä–æ—Ç –º–∞—Ç—Ä–∏—Ü—ã")
    print("30. –•–æ–¥—ã –∫–æ–Ω—è")
    print("31. –®–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞")
    print("32. –ü–æ–±–æ—á–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å")
    print("33. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 1")
    print("34. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 2")
    print("35. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 3")
    print("36. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 4")
    print("37. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ 5")
    print("38. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–º–µ–π–∫–æ–π")
    print("39. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏–∞–≥–æ–Ω–∞–ª—è–º–∏")
    print("40. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Ä–∞–ª—å—é")
    print("41. –°–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü")
    print("42. –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü üå∂Ô∏è")
    print("43. –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –≤ —Å—Ç–µ–ø–µ–Ω—å üå∂Ô∏è")
    print("44. –í–µ—Ä—à–∏–Ω–∞ –ø–∞—Ä–∞–±–æ–ª—ã")
    print("45. –ö–æ–Ω–∫—É—Ä—Å–Ω—ã–π –æ—Ç–±–æ—Ä")
    print("46. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¢—Ä–∏–±–æ–Ω–∞—á—á–∏")
    print("47. –ò—Ç–æ–≥–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –∏ –º–∞—Ç—Ä–∏—Ü—ã")
    print("48. –¢–∏–º—É—Ä –∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥–∞")
    print("49. –ö–Ω–∏–≥–∏ –Ω–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏–µ üå∂Ô∏è")
    print("50. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
    print("51. –ù–µ–ø–æ–≤—Ç–æ—Ä–∏–º—ã–µ —Ü–∏—Ñ—Ä—ã")
    print("52. –í—Å–µ 10 —Ü–∏—Ñ—Ä")
    print("53. –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã")
    print("54. –¢—Ä–∏ —Å–ª–æ–≤–∞")
    print("55. –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã 1")
    print("56. –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã 2")
    print("57. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ")
    print("58. –í—Å—Ç—Ä–µ—á–∞–ª–æ—Å—å –ª–∏ —á–∏—Å–ª–æ —Ä–∞–Ω—å—à–µ?")
    print("59. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö")
    print("60. –û–±—â–∏–µ —á–∏—Å–ª–∞")
    print("61. –ß–∏—Å–ª–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏")
    print("62. –û–±—â–∏–µ —Ü–∏—Ñ—Ä—ã")
    print("63. –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ü–∏—Ñ—Ä—ã")
    print("64. –í—Å–µ —Ü–∏—Ñ—Ä—ã")
    print("65. –£—Ä–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏")
    print("66. –£—Ä–æ–∫ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏")
    print("67. –£—Ä–æ–∫ —Ñ–∏–∑–∏–∫–∏")
    print("68. –£—Ä–æ–∫ –±–∏–æ–ª–æ–≥–∏–∏")
    print("69. –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ")
    print("70. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–±–Ω—ã—Ö –∫—É—Ä—Å–∞—Ö")
    print("71. –ù–∞–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("72. –ö–æ–¥ –ú–æ—Ä–∑–µ")
    print("73. –°–∞–º–æ–µ —Ä–µ–¥–∫–æ–µ —Å–ª–æ–≤–æ üå∂Ô∏è")
    print("74. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ üå∂Ô∏è")
    print("75. –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞")
    print("76. –ê–Ω–∞–≥—Ä–∞–º–º—ã 1")
    print("77. –ê–Ω–∞–≥—Ä–∞–º–º—ã 2")
    print("78. –°–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤")
    print("79. –°—Ç—Ä–∞–Ω—ã –∏ –≥–æ—Ä–æ–¥–∞")
    print("80. –¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞")
    print("81. –°–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ")


def choice():
    tasks()
    var = int(input("–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∑–∞–¥–∞–Ω–∏–µ : "))
    match var :
        case 1:
            josephus_problem.josephus_problem()
        case 2:
            coordinate_quarters.coordinate_qtrs()
        case 3:
            more_than_previous.count_digits_more_than_prev()
        case 4:
            swap_neighbour.swap_nghbr()
        case 5:
            developmental_shift.dvlpmntl_shift()
        case 6:
            various_elements.various_elements()
        case 7:
            mul_dig.mul_dig()
        case 8:
            rock_paper_scissors.start_game()
        case 9:
            rock_paper_scissors_lizard_spok.start_game()
        case 10:
            o_and_p.counter_p()
        case 11:
            sillicon_valley.find_anton()
        case 12:
            roscomnadzor.opyat_etot_()
        case 13:
            pascal_triangle.n_level()
        case 14:
            pascal_triangle.pascal_triangle()
        case 15:
            packing_duplicates.pack()
        case 16:
            chunky.run()
        case 17:
            sublists.run()
        case 18:
            matrix.create_and_print_matrix()
        case 19:
            matrix.create_square_matrix_and_sum_diagonal_elems()
        case 20:
            matrix.more_than_avg()
        case 21:
            matrix.max_below_main_diagonal()
        case 22:
            matrix.sum_in_quaters()
        case 23:
            matrix.mul_table()
        case 24:
            matrix.index_max_value_in_table()
        case 25:
            matrix.swap_column()
        case 26:
            matrix.is_symmetrical()
        case 27:
            matrix.swap_diagonals()
        case 28:
            matrix.up_and_down()
        case 29:
            matrix.rotate_matrix()
        case 30:
            matrix.horse_attack()
        case 31:
            matrix.chess_board()
        case 32:
            matrix.side_diagonal()
        case 33:
            matrix.fill_matrix()
        case 34:
            matrix.fill_matrix_verical()
        case 35:
            matrix.fill_matrix_zeroes_and_ones()
        case 36:
            matrix.fill_matrix_like_sand_clock()
        case 37:
            matrix.fill_matrix_with_shift()
        case 38:
            matrix.snake_fill_matrix()
        case 39:
            matrix.filling_with_diagonals()
        case 40:
            matrix.filling_with_spiral_fast()
        case 41:
            matrix.sum_matrix_task()
        case 42:
            matrix.mul_task()
        case 43:
            matrix.power_matrix()
        case 44:
            tuples.top_of_parabola()
        case 45:
            tuples.competitive_selection()
        case 46:
            tuples.print_tribonacci_sequence()
        case 47:
            Final_work_on_nested_lists_and_matrices.final_work_on_nexted_lists_and_matrics()
        case 48:
            print(sets.timur_and_team())
        case 49:
            sets.summer_books()
        case 50:
            sets.count_different_simb()
        case 51:
            sets.unique_digits()
        case 52:
            sets.all_ten_digits()
        case 53:
            sets.same_sets()
        case 54:
            sets.same_letters_in_three_words()
        case 55:
            sets.unique_symb_1()
        case 56:
            sets.unique_symb_2()
        case 57:
            sets.count_words()
        case 58:
            sets.is_this_number_in_the_set()
        case 59:
            sets.lenght_union_sets()
        case 60:
            sets.sorted_union()
        case 61:
            sets.sorted_dif()
        case 62:
            sets.same_dig_in_strings()
        case 63:
            sets.same_digits_in_two_numbers()
        case 64:
            sets.check_superset()
        case 65:
            sets.informatica_lesson()
        case 66:
            sets.math_lesson()
        case 67:
            sets.physics_lesson()
        case 68:
            sets.biology_lesson()
        case 69:
            dictionaries.string_representation()
        case 70:
            dictionaries.training_courses_information()
        case 71:
            dictionaries.message_typing()
        case 72:
            dictionaries.morse_code()
        case 73:
            dictionaries.rarest_word()
        case 74:
            dictionaries.correcting_duplicates()
        case 75:
            dictionaries.program_dictionary()
        case 76:
            dictionaries.anagrams_1()
        case 77:
            dictionaries.anagrams_2()
        case 78:
            dictionaries.synonym_dictionary()
        case 79:
            dictionaries.countries_and_cities()
        case 80:
            dictionaries.phone_book()
        case 81:
            dictionaries.secret_word()
        case _:
            print("–¢–∞–∫–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ—Ç =(")


if __name__ == '__main__':
    choice()